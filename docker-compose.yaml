services:
  # Docker Registry with TLS
  registry:
    image: registry:3
    container_name: registry
    restart: always
    ports:
      - "6000:5000"  # Registry API - only expose the main API port
    volumes:
      - ./config.yaml:/etc/distribution/config.yml:ro
      - ./certs/registry.crt:/etc/ssl/certs/domain.crt:ro
      - ./certs/registry.key:/etc/ssl/private/domain.key:ro
      - registry-data:/var/lib/registry
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_SERVICE_NAME=docker-registry
      - OTEL_TRACES_EXPORTER=otlp
    env_file:
      - .env
    networks:
      - monitoring
    depends_on:
      - jaeger
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "https://localhost:5001/metrics", "--no-check-certificate"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI - only expose the UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"  # Prometheus UI - only expose the UI
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./certs/registry.crt:/etc/prometheus/certs/registry.pem:ro
      - ./certs/registry.key:/etc/prometheus/certs/registry-key.pem:ro
      - ./certs/ca.pem:/etc/prometheus/certs/ca.pem:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    depends_on:
      - registry

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    env_file:
      - .env
    networks:
      - monitoring
    depends_on:
      - prometheus
      - jaeger

volumes:
  registry-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  monitoring:
    driver: bridge