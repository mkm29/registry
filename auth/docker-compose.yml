---

services:
  postgresql:
    image: registry.smigula.io/docker/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database-data:/var/lib/postgresql/data
    env_file:
      - .env
      - .secrets.env
    networks:
      - auth
  redis:
    image: registry.smigula.io/docker/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis-data:/data
    networks:
      - auth
  server:
    image: registry.smigula.io/ghcr/goauthentik/server:${AUTHENTIK_TAG:-2025.6.3}
    restart: unless-stopped
    command: server
    volumes:
      - media-data:/media
      - templates-data:/templates
    env_file:
      - .env
      - .secrets.env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth
  worker:
    image: registry.smigula.io/ghcr/goauthentik/server:${AUTHENTIK_TAG:-2025.6.3}
    restart: unless-stopped
    command: worker
    env_file:
      - .env
      - .secrets.env
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /run/users/1000/docker.sock:/var/run/docker.sock
      - media-data:-data:/media
      - certs-data:/certs
      - templates-data:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth

volumes:
  database-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/data/postgres
      o: bind
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/data/redis
      o: bind
  media-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/data/authentik/media
      o: bind
  certs-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/data/authentik/certs
      o: bind
  templates-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/data/authentik/templates
      o: bind

networks:
  auth:
    external: true
  registry:
    external: true
  traefik:
    external: true